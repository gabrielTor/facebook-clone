// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model representing users of the social media platform
model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  name         String?
  bio          String?
  friendsId    String?
  Friends      Friends?       @relation(fields: [friendsId], references: [id])
  posts        Post[]
  comments     Comment[]
  reactions    Reaction[]
  InnerComment InnerComment[]
}

model Friends {
  id    String @id @default(uuid())
  users User[]
}

// Post model representing user posts on the platform
model Post {
  id        String     @id @default(uuid())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime   @default(now())
  likes     Int        @default(0)
  comments  Comment[]
  Reaction  Reaction[]
}

// Comment model representing comments on posts
model Comment {
  id           String         @id @default(uuid())
  post         Post?          @relation(fields: [postId], references: [id])
  postId       String?
  author       User           @relation(fields: [authorId], references: [id])
  authorId     String
  content      String
  createdAt    DateTime       @default(now())
  InnerComment InnerComment[]
  Reaction     Reaction[]
}

model InnerComment {
  id        String     @id @default(uuid())
  comment   Comment    @relation(fields: [commentId], references: [id])
  commentId String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime   @default(now())
  Reaction  Reaction[]
}

// Reaction model representing reactions (e.g., like, love, etc.) to posts
model Reaction {
  id             String        @id @default(uuid())
  post           Post?         @relation(fields: [postId], references: [id])
  postId         String?
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  type           String // Can be extended to an enum or separate model if needed
  comment        Comment?      @relation(fields: [commentId], references: [id])
  commentId      String?
  InnerComment   InnerComment? @relation(fields: [innerCommentId], references: [id])
  innerCommentId String?
}
